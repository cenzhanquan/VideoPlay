#include "werewolfdialog.h"
#include "ui_werewolfdialog.h"
#include<QPalette>
#include<QMessageBox>
WerewolfDialog::WerewolfDialog(QWidget *parent) :
    /*QDialog*/CustomMoveDialog(parent),m_wolfRoomID(0),m_gameDays(0),m_false(0),m_playerSeatID(0),
    ui(new Ui::WerewolfDialog)
{
    ui->setupUi(this);

    //设置背景
    QPalette pal=this->palette();
    pal.setBrush(QPalette::Background,QBrush(QPixmap(":/images/background.jpg")));
    setPalette(pal);

    this->repaint();  //直接调用重绘事件


    //游戏规则手册
    m_GameRule=new GameRuleDialog;



    //对每个控件进行绑定   方便判断 事件 然后对其进行不同的处理

    btn[0]=ui->pb_player1;
    btn[1]=ui->pb_player2;
    btn[2]=ui->pb_player3;
    btn[3]=ui->pb_player4;
    btn[4]=ui->pb_player5;
    btn[5]=ui->pb_player6;
    btn[6]=ui->pb_player7;
    btn[7]=ui->pb_player8;

    for(int i=0;i<8;i++)
    {
        connect(btn[i],SIGNAL(clicked()),this,SLOT(btnclick()));
    }


}

WerewolfDialog::~WerewolfDialog()
{
    delete ui;
    if(m_GameRule)
    {
        delete m_GameRule;
        m_GameRule=NULL;
    }
}
//点击×退出房间
void WerewolfDialog::on_pushButton_23_clicked()
{
    on_pushButton_37_clicked();  //调用离开房间按钮事件
}
//重绘事件
void WerewolfDialog::paintEvent(QPaintEvent *event)
{
    QPainter painter(this);
    painter.drawPixmap(rect(),QPixmap(":/images/background.jpg"),QRect());
}
//设置当前玩家信息
void WerewolfDialog::setInfo(int roomid,int playerID)
{
    m_wolfRoomID=roomid;


    m_playerID=playerID;

    ui->pb_roomid->setText(QString("房间号:%1").arg(m_wolfRoomID));


}
//设置当前玩家的身份牌
void WerewolfDialog::SetIdentity(int Identity)
{
    m_yourIdentity=Identity;
}
//设置游戏天数
void WerewolfDialog::SetGameDays(int days)
{
     m_gameDays=days;
     ui->pb_days->setText(QString("游戏天数:%1").arg(m_gameDays));
}
//处理玩家死后禁用所有的按钮组件
void WerewolfDialog::SetDEADPERSONToDo()
{
    ui->pb_audio->hide();       //禁用语音键

    ui->pb_invitefriends->hide();  //禁用邀请好友键

    ui->pb_send->hide();            //禁用发送键

    ui->pb_audio->setText("打开音频设备");
}
//玩家死后设置 玩家的头像为死亡的头像
void WerewolfDialog::SetDEADPERSONIcon(int playerID)
{
    //当映射中没有该玩家的时候  不处理 直接退出
    if(m_mapIDToButton.find(playerID)==m_mapIDToButton.end())return ;

    QPushButton*DeathPlayerIcon=m_mapIDToButton[playerID];

    DeathPlayerIcon->setIcon(QIcon(QString(":/tx/death2.jpg")));   //设置为死亡的头像

    this->repaint();  //重绘
}

//设置加入房间的玩家头像 以及绑定ID
void WerewolfDialog::SetRoomMemberInfo(int playerID,int playerIconID,int playerSeat)
{
    if(playerSeat==-1)return ;

    // 拿玩家和 对应的每个PushButton绑定关系
    m_mapIDToButton[playerID]=btn[playerSeat];

    //设置UI  头像显示
    btn[playerSeat]->setIcon(QIcon(QString(":/tx/%1.png").arg(playerIconID)));

    this->repaint();  //重绘

}

//设置当前玩家的头像
void WerewolfDialog::solt_setplayerImage(int imageIcon)
{
    //可以通过判断MAP里所有头像有无设置来判断房间有无满人 ...TO DO
    m_playerIconID=imageIcon;
    if(m_mapIDToButton.size()<=8)
    {
            //--------------TO DO
    }

}
#include<QString>
#include<QDebug>
//处理不同鼠标发出的点击事件 ,处理不同的事情  当点击不同的房间里的作为的时候显示加入房间玩家的头像
void WerewolfDialog::btnclick()
{
    //处理多次点击换头像的问题
    if(m_false==1)return ;
    //发送者信号的对象
    QPushButton *optoBtn=qobject_cast<QPushButton*>(sender());


    for(int j=0;j<8;++j)
    {
        if(optoBtn==btn[j])
        {
            m_mapIDToButton[m_playerID]=btn[j];
            btn[j]->setIcon(QIcon(QString(":/tx/%1.png").arg(m_playerIconID)));

            m_playerSeatID=j;

            qDebug()<<QString("此时玩家选择的座位为%1").arg(j);

            //做为信号抛出此时玩家的座位 以及个人信息
            Q_EMIT SIG_PLAYERINFO(this->m_playerID,this->m_playerIconID,j,m_wolfRoomID);

            m_false=1;

            break;

        }
    }
    return ;
}

Ui::WerewolfDialog *WerewolfDialog::getUi() const
{
    return ui;
}
//离开房间
void WerewolfDialog::on_pushButton_37_clicked()
{
    if(QMessageBox::question(this,"提示","确定要退出房间吗?")==QMessageBox::No)return ;

     //发送信号
     Q_EMIT SIG_LEAVEWOLFROMM(m_wolfRoomID);   //发送离开房间的信号

    this->close();
}
//游戏规则说明手册
void WerewolfDialog::on_pushButton_22_clicked()
{
    //对应的窗口进行显示
    m_GameRule->show();
}
//点击打开音频
void WerewolfDialog::on_pb_audio_clicked()
{

    if(ui->pb_audio->text()=="打开音频设备")
    {
        //打开
        Q_EMIT SIG_PLAYEROPENAUDIO();

        ui->pb_audio->setText("关闭音频设备");
    }
    else
    {
        //close
        Q_EMIT SIG_PLAYERCLOSEAUDIO();

        ui->pb_audio->setText("打开音频设备");
    }
}
